{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAa;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,mBAAO,CAAC,0BAAU;AACrC,+BAA+B,mBAAO,CAAC,kBAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;;;;AC1CD;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://client/./src/main/index.ts","webpack://client/external node-commonjs \"electron\"","webpack://client/external node-commonjs \"path\"","webpack://client/webpack/bootstrap","webpack://client/webpack/before-startup","webpack://client/webpack/startup","webpack://client/webpack/after-startup"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst electron_1 = require(\"electron\");\nconst path_1 = __importDefault(require(\"path\"));\n// 메인 윈도우 생성 함수\nconst createWindow = () => {\n    // 브라우저 윈도우 인스턴스 생성\n    const mainWindow = new electron_1.BrowserWindow({\n        width: 800,\n        height: 600,\n        webPreferences: {\n            nodeIntegration: true, // react에서 Node.js API를 사용할 수 있게 해줌\n            contextIsolation: false, // true면 메인 프로세스와 렌더러 프로세스가 격리됨, false면 직접 통신 가능(개발할 때는 편의상 false)\n        },\n    });\n    // HTML파일을 창에 로드\n    // __dirname: 현재 파일의 디렉토리 경로\n    mainWindow.loadFile(path_1.default.join(__dirname, '../../src/renderer/index.html'));\n    // 개발자 도구 창 열기 (console.log)\n    mainWindow.webContents.openDevTools();\n};\n// app.whenReady(): Electron 앱이 초기화를 마치면 실행\nelectron_1.app.whenReady().then(() => {\n    createWindow(); // 첫 창 생성\n    // macOS에서만 해당되는 이벤트 핸들러\n    // dock 아이콘 클릭시 창이 없으면 새로 생성\n    electron_1.app.on('activate', () => {\n        if (electron_1.BrowserWindow.getAllWindows().length === 0) {\n            createWindow();\n        }\n    });\n});\n// 모든 창이 닫혔을 때의 이벤트 핸들러\nelectron_1.app.on('window-all-closed', () => {\n    // macOS가 아니면 앱 종료\n    // macOS는 창을 다 닫아도 dock에 아이콘이 남아있는게 기본 동작\n    if (process.platform !== 'darwin') {\n        electron_1.app.quit();\n    }\n});\n","module.exports = require(\"electron\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/main/index.ts\");\n",""],"names":[],"sourceRoot":""}